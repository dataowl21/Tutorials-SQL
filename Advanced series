-----MYSQL ADVANCED series

-- CTEs (common table expressions)

WITH CTE_Example AS
(
SELECT gender, AVG(salary) as avg_sal, MAX(salary) as max_sal, MIN(salary) as min_sal, COUNT(salary) as count_sal
FROM employee_demographics dem
JOIN employee_salary sal
	ON dem.employee_id = sal.employee_id
GROUP BY gender
)
SELECT AVG(avg_sal)
FROM CTE_Example;

WITH CTE_Example (gender, avg_salary,max_salary,min_salary,count_salary) AS
(
SELECT gender, AVG(salary) as avg_sal, MAX(salary) as max_sal, MIN(salary) as min_sal, COUNT(salary) as count_sal
FROM employee_demographics dem
JOIN employee_salary sal
	ON dem.employee_id = sal.employee_id
GROUP BY gender
)
SELECT *
FROM CTE_Example; 


WITH CTE_Example AS
(
SELECT employee_id, gender, birth_date
FROM employee_demographics dem
WHERE birth_date > '1985-01-01'
), 
CTE_Example2 AS
(
SELECT employee_id, salary
FROM employee_salary
WHERE salary > 50000
)
SELECT *
FROM CTE_Example a
JOIN CTE_Example2 b
	ON a.employee_id = b.employee_id
;

-- Temporary Tables

CREATE TEMPORARY TABLE temp_table
(first_name varchar(50),
last_name varchar(50),
favorite_movie varchar(100)
);

INSERT INTO temp_table
VALUES('Alex','Freberg','Lord of the Rings');

SELECT *
FROM temp_table;


CREATE TEMPORARY TABLE salary_over_50k
SELECT *
FROM employee_salary
WHERE salary >= 50000;

SELECT *
FROM salary_over_50k;

-- Stored Procedures

CREATE PROCEDURE large_salaries()
SELECT *
FROM employee_salary
WHERE salary >= 50000;

CALL large_salaries();

DELIMITER $$
CREATE PROCEDURE large_salaries2()
BEGIN
	SELECT *
	FROM employee_salary
	WHERE salary >= 50000;
	SELECT *
	FROM employee_salary
	WHERE salary >= 10000;
    END $$
    DELIMITER ;
    
    CALL large_salaries2();
    
    
DELIMITER $$
CREATE PROCEDURE large_salaries3(employee_id INT)
BEGIN
	SELECT salary
	FROM employee_salary
    WHERE employee_id = employee_id;
    END $$
    DELIMITER ;
    
    CALL large_salaries3(1);

-- Triggers and Events

SELECT*
FROM employee_salary;


SELECT*
FROM employee_demographics;

DELIMITER $$
CREATE TRIGGER employe_insert
	AFTER INSERT ON employee_salary 
    FOR EACH ROW
BEGIN
	INSERT INTO employee_demographics ( employee_id, first_name, last_name)
    VALUES (NEW.employee_id, NEW.first_name, NEW.last_name);
END $$
DELIMITER ;

INSERT INTO employee_salary (employee_id,first_name, last_name, occupation, salary,dept_id)
VALUES (13, 'Jean', 'Butterman','Entertaiment 720 CEO',1000000, NULL);


-- Events (schedule)

SELECT*
FROM employee_demographics;

DELIMITER $$
CREATE EVENT delete_retirees
ON SCHEDULE EVERY 30 SECOND
DO
BEGIN
	DELETE
	FROM employee_demographics
   WHERE age>=60 ;
END $$
DELIMITER ;

SHOW VARIABLES LIKE 'event%';
